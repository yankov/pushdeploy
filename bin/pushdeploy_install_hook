#!/usr/bin/env ruby
                                                     
#
# Overrides post-receive hook in your git repository.
#   
# First this script should determine the path to your remote origin git repository
# RVM path and rvm ruby string if you use it.  If it can't determine
# path to the repository it will launch a manual mode where you'll have to 
# enter these settings. You can also run 'pushdeploy_install_hook -m' to 
# enter this mode.          
#
# Then this script writes to /you_repository_path/hooks/post-recieve  
# This hook is launched when you completed 'git push'.
#
# Hook should switch to the right  RVM environment (if you use it) 
# and run 'git pull' in your project directory. Then hook will run 
# after_deploy.rb script in the config dir of project directory
# which lauches bundler, migrate and other commands that you specified.
#                                             

repository=`git config --get remote.origin.url`
                              
rvm_path = ENV['rvm_path']
rvm_string = rvm_path.nil? ? nil : `rvm current`  
current_path = `pwd`.chop

if ! File.directory?(repository) || ARGV[0] == '-m'   
    
  if ! File.directory?(repository)
     puts "\n\e[00;31m*** Can't locate your git repository. ***\e[00m"
     puts "\nMay be you run installer from a wrong directory?"
     puts "\nYou should run it from the root folder of your project. Something like /var/www/html/myapp/"
     puts "Current dir is: #{current_path}"
     puts "\n\e[00;32mAnyway, no worries, we can try to set everything up manually. Just answer some questions about your environment.\e[00m "
  end
 
  print "\nWhere is the git repository for this project located?: "
  repository = gets.chomp

  if !rvm_path.nil? 
     puts "\n\e[00;32mRVM path found:\e[00m \e[00;34m#{rvm_path}\e[00m.\n"
     puts "* hit Enter if this is a correct path."
  else
     puts "\nRVM path not found.\n"
  end

  puts "* type \e[00;32mn\e[00m if you don't even use RVM."
  puts "* or just enter your own path."
  print  "\nYour answer: "
  new_rvm_path = gets.chomp
             
  if new_rvm_path == 'n'
     rvm_path = nil
  elsif !new_rvm_path.empty?
     rvm_path = new_rvm_path
  end
   
 
  if new_rvm_path != "n" && !rvm_path.nil? 
         puts "\n***************************************************************************\n"   

      if !rvm_string.nil?
	       puts "This is your active gemset and version of Ruby: \e[00;34m#{rvm_string}\e[00m."
         puts "\n* Just hit Enter if this is correct for your project."
      else
         puts "Your rvm ruby string is not detected for some reason."
      end
      print  "\nEnter a rvm ruby string (usually something like 1.9.2@rails3): "
     
      new_rvm_string = gets.chomp   
      rvm_string = new_rvm_string.empty? ? rvm_string : new_rvm_string
      
  end
  
end  

# create 'hooks' folder if it doesn't exist                  
Dir.mkdir "#{repository}/hooks" if !File.directory? "#{repository}/hooks"
                                         
hook_file = File.open "#{repository}/hooks/post-receive", "w"
puts "\e[00;31mA error has been occured while trying to write to #{repository}/hooks/post-receive. Not enough permission?\e[00m\n\n Try using: sudo\n" && exit if hook_file.nil?  
                          
# writing a bash script to a hook
hook_file.write %{#!/bin/sh
deploy_dir=#{current_path}
read oldrev newrev refname

unset GIT_DIR && cd \$deploy_dir && git --work-tree=\$deploy_dir pull #{repository} -f
}

hook_file.write %{source "#{rvm_path}/scripts/rvm"\nrvm #{rvm_string}} if rvm_path && rvm_string

hook_file.write "\$deploy_dir/config/auto_deploy.rb \$oldrev \$newrev \$refname \$deploy_dir"

`chmod 770 #{repository}/hooks/post-receive`

puts "A error occured while trying to set permission of the hook. Try sudo?" && exit if !$?.success?

puts "\n*****************************************************************"
puts "\e[00;32mpost-receive hook has been successfully installed to #{repository}/hooks/post-receive\e[00m"
puts "*******************************************************************\n"

puts "Don't forget to run 'pushdeploy_create_config' inside of your project directory on a development machine.\n\n"

